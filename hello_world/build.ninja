# build.ninja generated by blade
ninja_required_version = 1.7
builddir = build64_release

rule stamp
  command = touch ${out}
  description = [1;32mSTAMP ${out}[0m
rule copy
  command = cp -f ${in} ${out}
  description = [1;32mCOPY ${in} ${out}[0m
rule ln
  command = cd `dirname ${in}` && ln -s `basename ${in}` `basename ${out}`
  description = [1;32mLN ${in} ${out}[0m

protocflags =
protoccpppluginflags =
protocjavapluginflags =
protocpythonpluginflags =

rule proto
  command = cpp3rdlib/protobuf/bin/protoc --proto_path=. ${indirect_protoc_incs}  -I=`dirname ${in}` --cpp_out=build64_release ${protocflags} ${protoccpppluginflags} ${in}
  description = [1;32mPROTOC ${in}[0m
rule new_proto
  command = cpp3rdlib/protobuf/bin/protoc --proto_path=. ${indirect_protoc_incs}  -I=`dirname ${source_in}` --cpp_out=. ${protocflags} ${protoccpppluginflags} ${in}
  description = [1;32mNEW_PROTOC ${in}[0m
rule protojava
  command = cpp3rdlib/protobuf/bin/protoc --proto_path=.  --java_out=build64_release/`dirname ${in}` ${protocjavapluginflags} ${in}
  description = [1;32mPROTOCJAVA ${in}[0m
rule protopython
  command = cpp3rdlib/protobuf/bin/protoc --proto_path=.  -I=`dirname ${in}` --python_out=build64_release ${protocpythonpluginflags} ${in}
  description = [1;32mPROTOCPYTHON ${in}[0m
rule protodescriptors
  command = cpp3rdlib/protobuf/bin/protoc --proto_path=.  -I=`dirname ${first}` --descriptor_set_out=${out} --include_imports --include_source_info ${in}
  description = [1;32mPROTODESCRIPTORS ${in}[0m
rule thrift
  command = cpp3rdlib/thrift/bin/thrift --gen cpp:include_prefix -I . -I cpp3rdlib/thrift/include -I `dirname ${in}` -out build64_release/`dirname ${in}` ${in}
  description = [1;32mTHRIFT ${in}[0m
rule fbthrift1
  command = cpp3rdlib/fbthrift/bin/thrift1.sh --gen cpp:enum_strict,include_prefix -I .  -I `dirname ${in}` -out build64_release/`dirname ${in}` ${in}
  description = [1;32mFBThrift1 ${in}[0m
rule fbthrift2
  command = cpp3rdlib/fbthrift/bin/thrift2.sh --gen=cpp2:include_prefix=`dirname ${in}`,compatibility -I .  -I `dirname ${in}` -o build64_release/`dirname ${in}` ${in}
  description = [1;32mFBThrift2 ${in}[0m

c_warnings = -Werror-implicit-function-declaration -Wall -Wextra -Wno-unused-function -Wno-unused-local-typedefs -Wno-unused-parameter -Wno-unused-variable -Wno-error=missing-field-initializers -Wno-error=sign-compare -Wno-error=unused-but-set-variable
cxx_warnings = -Wnon-virtual-dtor -Wvla -Wall -Wextra -Wno-unused-function -Wno-unused-local-typedefs -Wno-unused-parameter -Wno-unused-variable -Wno-error=missing-field-initializers -Wno-error=sign-compare -Wno-error=unused-but-set-variable

rule cc
  command = distcc gcc -o ${out} -MMD -MF ${out}.d -c -DHAVE_CONFIG_H -DHAVE_NETINET_IN_H -DHAVE_INTTYPES_H -DLINUX -fPIC -m64 -mcx16 -pipe -g -DNDEBUG -D_FILE_OFFSET_BITS=64 -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS ${c_warnings} ${cppflags} -I. -Ibuild64_release -I/usr/include/python2.7 ${includes} ${in}
  description = [1;32mCC ${in}[0m
  depfile = ${out}.d
  deps = gcc
rule cxx
  command = distcc g++ -o ${out} -MMD -MF ${out}.d -c -std=c++14 -fPIC -m64 -mcx16 -pipe -g -DNDEBUG -D_FILE_OFFSET_BITS=64 -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS ${cxx_warnings} ${cppflags} -I. -Ibuild64_release -I/usr/include/python2.7 ${includes} ${in}
  description = [1;32mCXX ${in}[0m
  depfile = ${out}.d
  deps = gcc

build __securecc_phony__ : phony

rule securecccompile
  command = None distcc g++ -o ${out} -c -fPIC -std=c++14 -m64 -mcx16 -pipe -g -DNDEBUG -D_FILE_OFFSET_BITS=64 -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS ${cxx_warnings} ${cppflags} -I. -Ibuild64_release -I/usr/include/python2.7 ${includes} ${in}
  description = [1;32mSECURECC ${in}[0m
rule securecc
  command = PYTHONPATH=/data00/tiger/typhoon-blade/src/blade:$$PYTHONPATH python -m toolchain securecc_object ${out} ${in}
  description = [1;32mSECURECC ${in}[0m
  restat = 1
rule ar
  command = rm -f $out; ar rcs $out $in
  description = [1;32mAR ${out}[0m
rule link
  command = g++ -o ${out} -m64 ${ldflags} ${objs} -Wl,--start-group ${origin_deps} -Wl,--end-group
  description = [1;32mLINK ${out}[0m
rule solink
  command = g++ -o ${out} -shared -m64 ${ldflags} ${in} ${extra_ldflags}
  description = [1;32mSHAREDLINK ${out}[0m
rule resource_index
  command = PYTHONPATH=/data00/tiger/typhoon-blade/src/blade:$$PYTHONPATH python -m toolchain resource_index ${name} ${path} ${out} ${in}
  description = [1;32mRESOURCE INDEX ${out}[0m
rule resource
  command = xxd -i ${in} | sed -e "s/^unsigned char /const char RESOURCE_/g" -e "s/^unsigned int /const unsigned int RESOURCE_/g" > ${out}
  description = [1;32mRESOURCE ${in}[0m

source_encoding = UTF-8
classpath = .
javacflags =

rule javac
  command = rm -fr ${classes_dir} && mkdir -p ${classes_dir} && javac -encoding ${source_encoding} -d ${classes_dir} -classpath ${classpath} ${javacflags} ${in} && sleep 0.5 && jar cf ${out} -C ${classes_dir} .
  description = [1;32mJAVAC ${in}[0m
rule javaresource
  command = PYTHONPATH=/data00/tiger/typhoon-blade/src/blade:$$PYTHONPATH python -m toolchain java_resource ${out} ${in}
  description = [1;32mJAVA RESOURCE ${in}[0m
rule javajar
  command = PYTHONPATH=/data00/tiger/typhoon-blade/src/blade:$$PYTHONPATH python -m toolchain java_jar jar ${out} ${in}
  description = [1;32mJAVA JAR ${out}[0m
javatargetundertestpkg = __targetundertestpkg__
rule javatest
  command = PYTHONPATH=/data00/tiger/typhoon-blade/src/blade:$$PYTHONPATH python -m toolchain java_test ${mainclass} ${javatargetundertestpkg} ${out} ${in}
  description = [1;32mJAVA TEST ${out}[0m
rule fatjar
  command = PYTHONPATH=/data00/tiger/typhoon-blade/src/blade:$$PYTHONPATH python -m toolchain java_fatjar ${out} ${in}
  description = [1;32mFAT JAR ${out}[0m
rule onejar
  command = PYTHONPATH=/data00/tiger/typhoon-blade/src/blade:$$PYTHONPATH python -m toolchain java_onejar  ${mainclass} ${out} ${in}
  description = [1;32mONE JAR ${out}[0m
rule javabinary
  command = PYTHONPATH=/data00/tiger/typhoon-blade/src/blade:$$PYTHONPATH python -m toolchain java_binary ${out} ${in}
  description = [1;32mJAVA BIN ${out}[0m

scalacflags = -nowarn

rule scalac
  command = JAVACMD=java scalac -encoding UTF8 -d ${out} -classpath ${classpath} ${scalacflags} ${in}
  description = [1;32mSCALAC ${out}[0m
rule scalatest
  command = PYTHONPATH=/data00/tiger/typhoon-blade/src/blade:$$PYTHONPATH python -m toolchain scala_test java scala ${out} ${in}
  description = [1;32mSCALA TEST ${out}[0m

pythonbasedir = __pythonbasedir__

rule pythonlibrary
  command = PYTHONPATH=/data00/tiger/typhoon-blade/src/blade:$$PYTHONPATH python -m toolchain python_library ${pythonbasedir} ${out} ${in}
  description = [1;32mPYTHON LIBRARY ${out}[0m
rule pythonbinary
  command = PYTHONPATH=/data00/tiger/typhoon-blade/src/blade:$$PYTHONPATH python -m toolchain python_binary ${pythonbasedir} ${mainentry} ${out} ${in}
  description = [1;32mPYTHON BINARY ${out}[0m
rule shelltest
  command = PYTHONPATH=/data00/tiger/typhoon-blade/src/blade:$$PYTHONPATH python -m toolchain shell_test ${out} ${in}
  description = [1;32mSHELL TEST ${out}[0m
rule shelltestdata
  command = PYTHONPATH=/data00/tiger/typhoon-blade/src/blade:$$PYTHONPATH python -m toolchain shell_testdata ${out} ${in} ${testdata}
  description = [1;32mSHELL TEST DATA ${out}[0m
rule lex
  command = flex ${lexflags} -o ${out} ${in}
  description = [1;32mLEX ${in}[0m
rule yacc
  command = bison ${yaccflags} -o ${out} ${in}
  description = [1;32mYACC ${in}[0m
rule package
  command = PYTHONPATH=/data00/tiger/typhoon-blade/src/blade:$$PYTHONPATH python -m toolchain package ${out} ${in} ${entries}
  description = [1;32mPACKAGE ${out}[0m
rule scm
  command = PYTHONPATH=/data00/tiger/typhoon-blade/src/blade:$$PYTHONPATH python -m toolchain scm ${out} ${git_info_array} ${main_info} ${profile} "${compiler}" ${git_info_len}
  description = [1;32mSCM ${out}[0m

build build64_release/version.cpp.o: cxx build64_release/version.cpp
  cppflags = -w -O2
  cxx_warnings =

rule nvcc_binary
  command = nvcc   -o ${out}
  description = [1;32mNvccBinary ${in}[0m
rule nvcc_object
  command = nvcc -ccbin g++ ${includes} ${extra_flags} -o ${out} -c ${in}
  description = [1;32mNvccObject ${in}[0m
rule drpc
  command = data-arch/drpc_gen/code_gen.py --idl_gen_path=`dirname ${in}` --workspace=build64_release/`dirname ${in}`/gen-drpc --out_dir=build64_release/`dirname ${in}`/gen-drpc --mode=0 --thrift_file=${in}
  description = [1;32mDRPC ${in}[0m
rule archon
  command = LD_LIBRARY_PATH= data-arch/archon-gen/code_gen.py --idl_gen_path=`dirname ${in}` --workspace=build64_release/`dirname ${in}`/ --out_dir=build64_release/`dirname ${in}`/ --thrift_file=${in} 
  description = [1;32mArchon ${in}[0m
rule flatc
  command = cpp3rdlib/flatbuffers/bin/flatc -o build64_release/`dirname ${in}` -c ${in}
  description = [1;32mFLATC ${in}[0m

build build64_release/hello_world/blade_main.objs/test_class.cpp.o: cxx hello_world/test_class.cpp
  cppflags = -O2 -fno-omit-frame-pointer
build build64_release/hello_world/blade_main: link build64_release/version.cpp.o build64_release/hello_world/blade_main.objs/test_class.cpp.o || build64_release/version.cpp.o
  objs = build64_release/version.cpp.o build64_release/hello_world/blade_main.objs/test_class.cpp.o
  extra_ldflags = -lpthread
  origin_deps = -lpthread
